

# FALTA ADC A FUN√á√ÉO DE M√âDICO FUNCIONALMENTE E ARQUIVO DE RANKING


import modExplicacoes
import random
from time import sleep

# Vari√°vel global para guardar os jogadores e acessar suas fun√ß√µes
jogadores = []
jogadores_vivos = 8

class Jogo:
    def __init__(self, usuario: int, player="", funcao=""):
        self.funcao = funcao # Fun√ß√£o do jogador
        self.vida = 1 # Vida inicial do jogador
        self.player = player # Nome do jogador
        self.usuario = usuario # Identificador do jogador (0 para o usu√°rio, outros n√∫meros para NPCs)


    
    def selecionar_papeis(self, papel: str) -> None:
        # Esta fun√ß√£o atribui uma fun√ß√£o (mafioso, doutor, xerife, cidad√£o) ao jogador com base no papel selecionado.
        funcao = ""
        if papel == "m":
            funcao = "mafioso"
        if papel == "d":
            funcao = "doutor"
        if papel == "x":
            funcao = "xerife"
        if papel == "c":
            funcao = "cidad√£o"
        
        self.funcao = funcao

        # Se o papel que est√° sendo escolhido for o do usu√°rio, imprime o nome e mostra a fun√ß√£o do usu√°rio
        if self.usuario == 0:
            print("")
            sleep(0.25)
            print(f"{self.player}, voc√™ √© um {funcao}! ü§´ü§´ü§´")

    
    def morte(self) -> None:
        # Esta fun√ß√£o define o estado de vida do jogador como morto (vida = 0) caso ele seja assassinado.
        self.vida = 0
        if self.usuario == 0:
            print("")
            print(f"{self.player}, nesta madrugada voc√™ foi morto!")


    def revive(self) -> None:
        # Essa fun√ß√£o √© chamada quando o doutor escolher salvar algu√©m que seria assassinado, logo a pessoa "revive".
        self.vida = 1



def jogar() -> None: # Fun√ß√£o principal que controla o jogo.
    global jogadores
    global jogadores_vivos

    modExplicacoes.inicio() #D√° boas vindas ao user e explica√ß√£o sobre o jogo
    jogador = input("Digite seu nome antes de come√ßarmos: ").strip().title()
    sleep(0.25)
    definir_funcoes(jogador) # Define as fun√ß√µes dos jogadores, recebe o jogador para falar o nome dele

    rodada = 1 # Inicia o contador de rodadas

    while jogadores_vivos > 2: # O jogo continua enquanto houver mais de 2 jogadores vivos
        sleep(0.5)
        modExplicacoes.mensagem_de_rodada(rodada)
        morto = matar() # O mafioso mata algu√©m durante a noite, o qual ser√° guardado nessa vari√°vel

        if verificar_morte(morto) == True: # O jogador morreu e deseja encerrar o jogo
            break

        if morto != 0:
            sleep(1)
            modExplicacoes.mensagem_morte_npc(morto)
            jogadores_vivos -= 1
            investigacao_xerife()

        if debate() == True:
            break

        rodada += 1 # Incrementa a rodada



def user_morto(jogador):
    global jogadores
    terminar = False
    print(f"Durante a noite, o assassino fez algo terr√≠vel... Invadiu a casa de {jogador} e cometeu um ato brutal.")
    sleep(0.5)
    print(f"V√≠tima de 23 facadas, {jogadores[0].player} infelizmente n√£o resistiu.")

    sleep(1)
    print(f"\n{jogadores[0].player}, voc√™ morreu!! üòûüòû")
    sleep(0.5)
    saida = input("Deseja continuar assistindo o jogo? (Responda com Sim ou N√£o): ").strip().title()
    try:
        if (saida == "Nao") or (saida == "N") or (saida == "N√£o") or (saida == "√ë"):
            sleep(0.25)
            print("Obrigado por jogar!")
            terminar = True
        else:
            sleep(0.25)
            print("Continuando como telespectador... \n")
    except:
        print("Resposta inv√°lida.")
    return terminar



def verificar_morte(morto:int) -> bool:
    global jogadores_vivos
    if morto == 0:
        if user_morto(jogadores[0].player):
            return True
        jogadores_vivos -= 1
    return False
    


def definir_funcoes(jogador: str):
    funcoes = ["d", "x", "m", "c", "c", "c", "c", "c"]

    func = random.choice(funcoes)

    # Preenche o papel do usu√°rio e imprime para ele
    jogadores.append(Jogo(0, jogador))
    jogadores[0].selecionar_papeis(func)
    funcoes.remove(func)

    # Preenche os pap√©is dos jogadores que s√£o computador
    for npc in range(1, 8):
        func = random.choice(funcoes) 
        jogadores.append(Jogo(npc, f"Jogador {npc}"))
        jogadores[npc].selecionar_papeis(func) 
        funcoes.remove(func)

    # Imprime a fun√ß√£o de cada jogador -- apenas de teste para checar se o programa est√° correndo corretamente, na vers√£o final isso deve ser retirado.
    for j in jogadores:
        print(f"Jogador {j.usuario}: {j.funcao}")



def matar() -> int:
    ''' Essa fun√ß√£o √© respons√°vel por selecionar e matar um jogador. Caso o usu√°rio for o mafioso, ele escolhe a v√≠tima.
        Caso contr√°rio, a v√≠tima √© escolhida aleatoriamente. A fun√ß√£o checa se o alvo √© v√°lido ou n√£o e tamb√©m utiliza
        try except para tratar os erros do c√≥digo (caso o usu√°rio digite uma string inv√©s de um int ou um int fora do 
        index permitido). '''

    global jogadores
    mata = False

    if jogadores[0].funcao == "mafioso":

        while mata == False:
            try:
                alvo = int(input("Digite o n√∫mero do jogador que voc√™ deseja matar: "))

                if 0 < alvo < len(jogadores) and jogadores[alvo].vida == 1:
                    print("Alvo V√°lido.")
                    mata = True
                    jogadores[alvo].morte() # O alvo estar√° morto 
                    if jogadores[alvo].vida == 0: 
                        sleep(1)
                        print(f"O jogador {alvo} foi assassinado com sucesso.")   

                else:
                        print("Esse jogador j√° morreu.")
            except:
                print("Jogador inv√°lido, digite corretamente.")
    
    else:
        while mata == False:
            alvo = random.randint(0, 4)
            if jogadores[alvo].funcao != "mafioso" and jogadores[alvo].vida == 1:
                mata = True
                jogadores[alvo].morte(True) # Alvo sinalizado como morto
    
    return alvo # Retorna o jogador que morreu


def debate() -> bool:
    global jogadores_vivos
    sleep(2)
    print("Agora os jogadores v√£o debater para tentar achar o mafioso!")
    acusacao = acusa(jogadores_vivos)

    if acusacao[0] == 0:
        return True

    if acusacao[1] != -1:
        jogadores[acusa[1]].morte(True)
        sleep(0.5)
        print(f"O jogador {jogadores[acusa[1]].player} foi sentenciado a morte por seus companheiros! Ele foi eliminado.")

        if acusacao[1] == 0:
            sleep(0.5)
            print("Voc√™ foi eliminado!")
            return True
        
    return False



def medico(vitima: int) -> bool: 
    '''Essa fun√ß√£o √© para que o m√©dico consiga escolher uma pessoa para proteger por noite. Caso o assassino tente matar o protegido pelo m√©dico,
        esta pessoa n√£o morrer√° e 'reviver√°' durante a noite.'''
    global jogadores
    reviveu = False
    escolha = False
    medico_vivo = False
    for buscando_vida in range(len(jogadores)):
        if jogadores[buscando_vida].funcao == 'doutor' and jogadores[buscando_vida].vida == 1:
            medico_vivo = True
    if jogadores[0].funcao == "doutor" and medico_vivo == True:
        while escolha == False:
            tentativa_de_salvar = int(input("Digite o nome do jogador que voc√™ deseja proteger nesta noite: "))
            if tentativa_de_salvar == vitima:
                jogadores[tentativa_de_salvar].revive()
                reviveu = True
                escolha = True
            elif tentativa_de_salvar != vitima and jogadores[tentativa_de_salvar].vida == 0:
                print("Este jogador morreu em outra noite... Infelizmente j√° √© tarde demais para salv√°-lo.")
            else:
                escolha = True
    elif medico_vivo == True:
        while escolha == False:
            escolha = random.randint(0, 7)
            if vitima == escolha:
                jogadores[tentativa_de_salvar].revive()
                reviveu = True
                escolha = True
            elif jogadores[tentativa_de_salvar].vida == 1:
                escolha = True
            
    return reviveu



def xerife() -> None:
    '''  Fun√ß√£o respons√°vel pela investiga√ß√£o do usu√°rio quando ele for o xerife para tentar descobrir quem √© o assassino.
         Caso o jogador descubra quem √© o assassino, ele poder√° tentar votar o assassino fora com os outros NPCs, que
         aleatoriamente ir√£o concordar ou discordar dele.'''
    global jogadores
    acusacao = False
    if jogadores[0].funcao == "xerife":
        while acusacao == False:
            try:
                sleep(1)
                acusado = int(input("Digite o n√∫mero do jogador que voc√™ deseja investigar se √© o assassino ou n√£o: "))
                if 0 < acusado < len(jogadores) and jogadores[acusado].vida == 1:
                    if jogadores[acusado].funcao == "mafioso":
                        sleep(0.5)
                        print(f"O {jogadores[acusado].player} √© o assassino!!!")
                        sleep(0.5)
                        print("Converse com os outros moradores da Cidade para o eliminar!")
                        acusacao = True
                    else:
                        sleep(0.5)
                        print(f"O {jogadores[acusado].player} n√£o √© o assassino... Ele ainda est√° a solta. ")
                        acusacao = True
                elif jogadores[acusado].vida == 0:
                    sleep(0.5)
                    print(f"O {jogadores[acusado].player} j√° est√° morto!! Investigue outro jogador.")
                else:
                    sleep(0.5)
                    print(f"Jogador inv√°lido. Tome cuidado com a investiga√ß√£o, Xerife {jogadores[0].player}.")
            except:
                sleep(0.25)
                print("Inv√°lido, tente novamente.")
                

def investigacao_xerife() -> None:
    global jogadores
    if jogadores[0].funcao == "xerife" and jogadores[0].vida == 1:
        xerife()


def acusa(quantidade_vivos: int) -> list[int, bool]: 
    '''Fun√ß√£o principal respons√°vel por fazer o debate de acusa√ß√£o entre os 8 jogadores.'''
    global jogadores
    resultado = False
    players_vivos = jogadores_vivos()

    if jogadores[0].vida == 0:
        print("\nJogadores vivos:", players_vivos)
        resultado, quantidade_vivos = acusacao_npcs(quantidade_vivos)
    else:
        print("Jogadores vivos:", players_vivos)
        resultado, quantidade_vivos = acusacao_jogadores(quantidade_vivos)

    return [quantidade_vivos, resultado]




def jogadores_vivos() -> list[str]:
    '''Fun√ß√£o respons√°vel por retornar uma lista dos players vivos, que ser√° utilizada na fun√ß√£o de acusar.'''
    global jogadores
    players_vivos = []

    for jogador in jogadores:
        if jogador.vida == 1:
            players_vivos.append(jogador.usuario)

    return players_vivos



def acusacao_npcs(quantidade_vivos: int) -> tuple[bool, int]:
    '''Fun√ß√£o respons√°vel por fazer a acusa√ß√£o dos NPCs, que ser√° utilizada na fun√ß√£o de acusar.'''
    global jogadores
    resultado = False
    ja_acusado = 0

    while not resultado:
        escolha = escolher_acusacao_npc(ja_acusado)
        voto = random.randint(1, 2)
        resultado, quantidade_vivos = votacao_npc(escolha, voto, quantidade_vivos)

        if not resultado:
            ja_acusado = escolha

    return resultado, quantidade_vivos



def escolher_acusacao_npc(ja_acusado: int) -> int:
    '''Fun√ß√£o respons√°vel por definir quem ser√° o player acusado. Ser√° utilizada na fun√ß√£o de acusar.'''
    global jogadores
    acusacao = False

    while not acusacao:
        escolha = random.randint(1, 4)

        if escolha < len(jogadores) and jogadores[escolha].vida == 1 and escolha != ja_acusado:
            acusacao = True
            print(f"\nOs jogadores decidiram acusar o player {escolha}. Hora da vota√ß√£o!")

    return escolha



def votacao_npc(escolha: int, voto: int, quantidade_vivos: int) -> tuple[bool, int]:
    global jogadores
    if voto == 2 and jogadores[escolha].funcao != "mafioso":
        sleep(1)
        print("\nVota√ß√£o conclu√≠da! O jogador acusado foi eliminado. Ele n√£o era o mafioso!")
        quantidade_vivos -= 1
        jogadores[escolha].morte(True)
        return True, quantidade_vivos
    elif voto == 1 and jogadores[escolha].funcao == "mafioso":
        sleep(2)
        print("\nVota√ß√£o conclu√≠da! O jogador acusado foi eliminado. Ele era o mafioso! A CIDADE VENCEU!")
        return True, 0
    else:
        sleep(2)
        print("\nVota√ß√£o conclu√≠da! O jogador acusado n√£o deve ser eliminado. Outra acusa√ß√£o ser√° feita.")
        return False, quantidade_vivos



def acusacao_jogadores(quantidade_vivos: int) -> tuple[bool, int]:
    global jogadores
    resultado = False
    while not resultado:
        escolha_usuario = escolher_acusacao_jogador()
        resultado, quantidade_vivos = votacao_jogador(escolha_usuario, quantidade_vivos)
    return resultado, quantidade_vivos



def escolher_acusacao_jogador() -> int:
    global jogadores
    escolha = False
    while not escolha:
        escolha_usuario = int(input("\nDigite o n√∫mero do player que voc√™ quer acusar: "))
        if escolha_usuario <= 0 or escolha_usuario > 8:
            print("N√∫mero inv√°lido.")
        elif jogadores[escolha_usuario].vida == 0:
            print("\nEsse player j√° est√° morto. Escolha outro.")
        else:
            escolha = True
            print("Os jogadores est√£o decidindo quem eles querem acusar...")
    return escolha_usuario



def votacao_jogador(escolha_usuario: int, quantidade_vivos: int) -> tuple[bool, int]:
    global jogadores

    defesa_usuario = input(f"{jogadores[0].player}, voc√™ pode tentar se defender para se salvar. Digite sua defesa: ") 

    if escolha_usuario == 0:
        print(f"{jogadores[0].player} est√° tentando se defender!")
   
    else:
        exibir_defesa_jogador(escolha_usuario)

    voto_final = random.randint(0, 1)
    
    if voto_final == 1 and jogadores[escolha_usuario].funcao != "mafioso":
        print(f"O {jogadores[escolha_usuario].usuario} n√£o era o mafioso! Boa sorte na pr√≥xima vota√ß√£o.")
        jogadores[escolha_usuario].morte(True)
        return True, quantidade_vivos - 1
    
    elif voto_final == 1 and jogadores[escolha_usuario].funcao == "mafioso":
        print(f"O {jogadores[escolha_usuario].usuario} ERA o mafioso! A CIDADE VENCEU!")
        jogadores[escolha_usuario].morte(True)
        return True, 0
    
    else:
        print(f"\nVota√ß√£o conclu√≠da! O {jogadores[escolha_usuario].usuario} n√£o foi eliminado.")
        return False, quantidade_vivos



def exibir_defesa_jogador(escolha_usuario: int):
    global jogadores
    lista_defesas = [
        "Eu n√£o fiz nada! Nem estava acordado na √∫ltima noite.",
        "Estava jogando no meu computador a noite inteira! V√£o acusar outra pessoa!",
        "Eu n√£o sei nem o que falar para me defender, mas n√£o fui eu, por favor!",
        "Eu dormi cedo na √∫ltima noite.",
        "Durante a √∫ltima noite, eu estava saindo com a minha namorada."
    ]
    print(f"O {jogadores[escolha_usuario].player} vai se defender: \n")
    print(random.choice(lista_defesas))





# Chama a fun√ß√£o principal para iniciar o jogo

if __name__ == "__main__":
    jogar()
